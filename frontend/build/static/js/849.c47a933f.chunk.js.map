{"version":3,"file":"static/js/849.c47a933f.chunk.js","mappings":"yHAAA,WACI,IAAMA,EAAUC,SAASC,cAAc,YACjCC,EAAWF,SAASC,cAAc,aAClCE,EAAYD,EAASD,cAAc,SACnCG,EAAYJ,SAASK,iBAAiB,cACtCC,GAAiBC,EAAAA,EAAAA,GAAOL,EAASM,UAEvC,GAAKT,GAAYG,GAAaC,GAAcC,EAAUK,OAAtD,CAKA,IAEIC,EACAC,EACAC,EAJAC,GAAa,EAObC,EAAcC,KAAKC,MAAMd,EAASe,YAAcd,EAAUc,aAG9DX,EAAkBY,OAAOJ,GAAaK,UAAUC,SAAQ,SAAAC,GACtDnB,EAASoB,mBAAmB,aAAcD,EAAKE,UACjD,IAGAjB,EAAkBY,MAAM,EAAGJ,GAAaM,SAAQ,SAAAC,GAC9CnB,EAASoB,mBAAmB,YAAaD,EAAKE,UAChD,IAGArB,EAASsB,UAAUC,IAAI,iBACvBvB,EAASwB,WAAaxB,EAASe,YAC/Bf,EAASsB,UAAUG,OAAO,iBAG1B,IAAMC,EAAW,SAACC,GAChB3B,EAAS0B,SAAS,CAChBE,KAAMD,EACNE,SAAU,UAEd,EAGA3B,EAAUgB,SAAQ,SAAAY,GAChBA,EAAIC,iBAAiB,SAAS,WAC5B,IAAMJ,EAA0B,SAAXG,EAAIE,GAAgBhC,EAASwB,WAAavB,EAAUc,YAAcf,EAASwB,WAAavB,EAAUc,YACvHW,EAASC,EACX,GACF,IAGA3B,EAAS+B,iBAAiB,aAAa,SAACE,GACtCtB,GAAa,EACbX,EAASsB,UAAUC,IAAI,YAEvBf,EAASyB,EAAEC,MACXzB,EAAkBT,EAASwB,UAC7B,IAGA1B,SAASiC,iBAAiB,aAAa,SAACE,GAClCtB,IAEFX,EAASwB,WAAaf,GAAmBwB,EAAEC,MAAQ1B,GAEvD,IAGAV,SAASiC,iBAAiB,WAAW,WACnCpB,GAAa,EACbX,EAASsB,UAAUG,OAAO,WAC5B,IAGA,IAsBMU,EAAW,WACXC,OAAOC,WAAa,MAExB3B,EAAY4B,YAAW,WACrB,IAAMX,EAAe3B,EAASwB,WAAavB,EAAUc,YACrDW,EAASC,EACX,GAAG,MACL,EAEA3B,EAAS+B,iBAAiB,UA/BH,WAEO,IAAxB/B,EAASwB,YACXxB,EAASsB,UAAUC,IAAI,iBACvBvB,EAASwB,WAAaxB,EAASuC,YAAe,EAAIvC,EAASe,YAC3Df,EAASsB,UAAUG,OAAO,kBAGnBZ,KAAK2B,KAAKxC,EAASwB,cAAgBxB,EAASuC,YAAcvC,EAASe,cAC1Ef,EAASsB,UAAUC,IAAI,iBACvBvB,EAASwB,WAAaxB,EAASe,YAC/Bf,EAASsB,UAAUG,OAAO,kBAI5BgB,aAAa/B,GACRb,EAAQ6C,QAAQ,WACnBP,GAEJ,IAaAtC,EAAQkC,iBAAiB,cAAc,kBAAMU,aAAa/B,EAAU,IACpEb,EAAQkC,iBAAiB,aAAcI,GAGvCA,GAtGA,MAFEQ,QAAQC,MAAM,uDAyGjB,CAjHH,E","sources":["assets/js/gclist.js"],"sourcesContent":["(function () {\n    const wrapper = document.querySelector(\".wrapper\");\n    const carousel = document.querySelector(\".carousel\");\n    const firstCard = carousel.querySelector(\".card\");\n    const arrowBtns = document.querySelectorAll(\".wrapper i\");\n    const carouselChildrens = [...carousel.children];\n  \n    if (!wrapper || !carousel || !firstCard || !arrowBtns.length) {\n      console.error(\"Some required elements not found. Exiting gclist.js.\");\n      return;\n    }\n  \n    let isDragging = false;\n    let isAutoPlay = true;\n    let startX;\n    let startScrollLeft;\n    let timeoutId;\n  \n    // Get the number of cards that can fit in the carousel at once\n    let cardPerView = Math.round(carousel.offsetWidth / firstCard.offsetWidth);\n  \n    // Insert copies of the last few cards to the beginning of the carousel for infinite scrolling\n    carouselChildrens.slice(-cardPerView).reverse().forEach(card => {\n      carousel.insertAdjacentHTML(\"afterbegin\", card.outerHTML);\n    });\n  \n    // Insert copies of the first few cards to the end of the carousel for infinite scrolling\n    carouselChildrens.slice(0, cardPerView).forEach(card => {\n      carousel.insertAdjacentHTML(\"beforeend\", card.outerHTML);\n    });\n  \n    // Scroll the carousel to the appropriate position to hide the first few duplicate cards on Firefox\n    carousel.classList.add(\"no-transition\");\n    carousel.scrollLeft = carousel.offsetWidth;\n    carousel.classList.remove(\"no-transition\");\n  \n    // Function to handle carousel scroll animation\n    const scrollTo = (scrollOffset) => {\n      carousel.scrollTo({\n        left: scrollOffset,\n        behavior: \"smooth\"\n      });\n    };\n  \n    // Add event listeners for the arrow buttons to scroll the carousel left and right\n    arrowBtns.forEach(btn => {\n      btn.addEventListener(\"click\", () => {\n        const scrollOffset = btn.id === \"left\" ? carousel.scrollLeft - firstCard.offsetWidth : carousel.scrollLeft + firstCard.offsetWidth;\n        scrollTo(scrollOffset);\n      });\n    });\n  \n    // Event listener for mouse down to start dragging\n    carousel.addEventListener(\"mousedown\", (e) => {\n      isDragging = true;\n      carousel.classList.add(\"dragging\");\n      // Records the initial cursor and scroll position of the carousel\n      startX = e.pageX;\n      startScrollLeft = carousel.scrollLeft;\n    });\n  \n    // Event listener for mouse move while dragging\n    document.addEventListener(\"mousemove\", (e) => {\n      if (isDragging) {\n        // Updates the scroll position of the carousel based on the cursor movement\n        carousel.scrollLeft = startScrollLeft - (e.pageX - startX);\n      }\n    });\n  \n    // Event listener for mouse up to stop dragging\n    document.addEventListener(\"mouseup\", () => {\n      isDragging = false;\n      carousel.classList.remove(\"dragging\");\n    });\n  \n    // Function to handle infinite scrolling of the carousel\n    const infiniteScroll = () => {\n      // If the carousel is at the beginning, scroll to the end\n      if (carousel.scrollLeft === 0) {\n        carousel.classList.add(\"no-transition\");\n        carousel.scrollLeft = carousel.scrollWidth - (2 * carousel.offsetWidth);\n        carousel.classList.remove(\"no-transition\");\n      }\n      // If the carousel is at the end, scroll to the beginning\n      else if (Math.ceil(carousel.scrollLeft) === carousel.scrollWidth - carousel.offsetWidth) {\n        carousel.classList.add(\"no-transition\");\n        carousel.scrollLeft = carousel.offsetWidth;\n        carousel.classList.remove(\"no-transition\");\n      }\n  \n      // Clear existing timeout & start autoplay if the mouse is not hovering over the carousel\n      clearTimeout(timeoutId);\n      if (!wrapper.matches(\":hover\")) {\n        autoPlay();\n      }\n    };\n  \n    // Function to handle autoplay of the carousel\n    const autoPlay = () => {\n      if (window.innerWidth < 800 || !isAutoPlay) return; // Return if the window is smaller than 800 or isAutoPlay is false\n      // Autoplay the carousel after every 2500 ms\n      timeoutId = setTimeout(() => {\n        const scrollOffset = carousel.scrollLeft + firstCard.offsetWidth;\n        scrollTo(scrollOffset);\n      }, 2500);\n    };\n  \n    carousel.addEventListener(\"scroll\", infiniteScroll);\n    wrapper.addEventListener(\"mouseenter\", () => clearTimeout(timeoutId));\n    wrapper.addEventListener(\"mouseleave\", autoPlay);\n  \n    // Start the autoplay\n    autoPlay();\n  })();\n  "],"names":["wrapper","document","querySelector","carousel","firstCard","arrowBtns","querySelectorAll","carouselChildrens","_toConsumableArray","children","length","startX","startScrollLeft","timeoutId","isDragging","cardPerView","Math","round","offsetWidth","slice","reverse","forEach","card","insertAdjacentHTML","outerHTML","classList","add","scrollLeft","remove","scrollTo","scrollOffset","left","behavior","btn","addEventListener","id","e","pageX","autoPlay","window","innerWidth","setTimeout","scrollWidth","ceil","clearTimeout","matches","console","error"],"sourceRoot":""}